import requests
import csv
import time
import json
import os
from datetime import datetime
from typing import List, Dict, Any

class XeetLeaderboardParser:
    def __init__(self):
        self.base_url = "https://www.xeet.ai/api/tournaments/5ea420b7-17c1-4a9d-9501-0fcaa60387f9/leaderboard"
        self.total_pages = 431
        self.limit = 20
        self.csv_file = "xeet_crypto_creators_stats.csv"
        self.avatars_file = "xeet_avatars.csv"
        self.metadata_file = "xeet_metadata.json"
        self.session = requests.Session()
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
        })
        
    def fetch_page(self, page: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã API"""
        params = {
            'page': page,
            'limit': self.limit
        }
        
        try:
            response = self.session.get(self.base_url, params=params, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
            return None
    
    def get_last_updated_from_api(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ API (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"""
        try:
            response = self.session.get(self.base_url, params={'page': 1, 'limit': 1}, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            # lastUpdated –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π
            if 'data' in data and len(data['data']) > 0:
                return data['data'][0].get('lastUpdated', '')
            return ''
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return ''
    
    def load_metadata(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.metadata_file):
            try:
                with open(self.metadata_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}
    
    def save_metadata(self, metadata: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def check_if_update_needed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ API
        current_last_updated = self.get_last_updated_from_api()
        if not current_last_updated:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ API. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
            return True
        
        print(f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ API: {current_last_updated}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = self.load_metadata()
        saved_last_updated = metadata.get('lastUpdated', '')
        
        if not saved_last_updated:
            print("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥.")
            return True
        
        print(f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {saved_last_updated}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
        if current_last_updated == saved_last_updated:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return False
        else:
            print("üîÑ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
            return True
    
    def extract_influencer_data(self, item: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞"""
        user = item.get('user', {})
        
        return {
            'rank': item.get('rank', 0),
            'username': user.get('username', ''),
            'followerCount': user.get('followerCount', 0),
            'score': round(item.get('score', 0), 2),
            'signalScore': round(item.get('signalScore', 0), 2),
            'noisePoints': round(item.get('noisePoints', 0), 2),
            'totalEngagement': item.get('totalEngagement', 0),
            'engagementRate': item.get('engagementRate', 0),
            'averageEngagementPerPost': item.get('averageEngagementPerPost', 0)
        }
    
    def extract_avatar_data(self, item: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞"""
        user = item.get('user', {})
        
        return {
            'username': user.get('username', ''),
            'avatar': user.get('avatar', ''),
            'name': user.get('name', '')
        }
    
    def parse_all_pages(self) -> tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–æ–≤)"""
        all_data = []
        all_avatars = []
        
        for page in range(1, self.total_pages + 1):
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}/{self.total_pages}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_data = self.fetch_page(page)
            
            if page_data is None:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
            influencers = page_data.get('data', [])
            
            if not influencers:
                print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
            for influencer in influencers:
                extracted_data = self.extract_influencer_data(influencer)
                avatar_data = self.extract_avatar_data(influencer)
                all_data.append(extracted_data)
                all_avatars.append(avatar_data)
            
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(influencers)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        return all_data, all_avatars
    
    def save_to_csv(self, data: List[Dict[str, Any]], filename: str = "xeet_crypto_creators_stats.csv"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
        if not data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        fieldnames = [
            'rank', 'username', 'followerCount', 'score', 'signalScore',
            'noisePoints', 'totalEngagement', 'engagementRate', 'averageEngagementPerPost'
        ]
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(data)
            
            print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def save_avatars_to_csv(self, avatar_data: List[Dict[str, Any]], filename: str = "xeet_avatars.csv"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª"""
        if not avatar_data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        fieldnames = ['username', 'avatar', 'name']
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(avatar_data)
            
            print(f"–î–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
            print(f"–í—Å–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–æ–≤: {len(avatar_data)}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
    
    def save_metadata_after_parsing(self, last_updated: str, total_records: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        metadata = {
            'lastUpdated': last_updated,
            'totalRecords': total_records,
            'parsedAt': datetime.now().isoformat(),
            'totalPages': self.total_pages
        }
        self.save_metadata(metadata)
        print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {last_updated}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        print("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ Xeet.ai...")
        print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.total_pages}")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not self.check_if_update_needed():
            print("\n" + "="*50)
            print("–î–ê–ù–ù–´–ï –ê–ö–¢–£–ê–õ–¨–ù–´")
            print("="*50)
            print("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª:")
            print(f"- {self.csv_file}")
            print(f"- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {self.metadata_file}")
            return
        
        print("\n" + "="*50)
        print("–ù–ê–ß–ò–ù–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•")
        print("="*50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        last_updated = self.get_last_updated_from_api()
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        all_data, all_avatars = self.parse_all_pages()
        
        if all_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV
            self.save_to_csv(all_data, self.csv_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            self.save_avatars_to_csv(all_avatars, self.avatars_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if last_updated:
                self.save_metadata_after_parsing(last_updated, len(all_data))
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    parser = XeetLeaderboardParser()
    parser.run()

if __name__ == "__main__":
    main()
